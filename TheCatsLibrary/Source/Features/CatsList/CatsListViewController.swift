//
//  CatsListViewController.swift
//  TheCatsLibrary
//
//  Created by Mauro Coletes on 24/08/20.
//  Copyright (c) 2020 Mauro Coletes. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatsListDisplayLogic: class, ViewControllerErrorProtocol {
    func startLoading()
    func stopLoading()
    func showCats(cats: [CatsList.CatVM])
    func showCatDetail()
}

class CatsListViewController: UIViewController, CatsListDisplayLogic, ViewControllerErrorProtocol {
    
    // MARK: - IBOutlet
    
    @IBOutlet weak var collectionView: UICollectionView!
    @IBOutlet weak var leftCollectionViewMargin: NSLayoutConstraint!
    @IBOutlet weak var rightCollectionViewMargin: NSLayoutConstraint!
    
    // MARK: - Internal Properties
    
    var interactor: CatsListBusinessLogic?
    var router: (NSObjectProtocol & CatsListRoutingLogic & CatsListDataPassing)?
    
    // MARK: - Private Properties
    
    private var viewModel = CatsList.ViewModel()
    private var footerHeight: CGFloat = 80
    private var catsListDelegates: CatsListCollectionViewDelegates?
    
    // MARK: - Init
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Override Methods
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        guard let flowLayout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout else {
            return
        }
        flowLayout.invalidateLayout()
    }
    
    // MARK: - Setup
    
    private func setup() {
        let viewController = self
        let interactor = CatsListInteractor()
        let presenter = CatsListPresenter()
        let router = CatsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        catsListDelegates = CatsListCollectionViewDelegates(cats: [], interactor: interactor)
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTitle()
        setupCollectionView()
        fetchCats()
    }
    
    // MARK: - Internal Methods
    
    func startLoading() {
        catsListDelegates?.footerHeight = 50
    }
    
    func stopLoading() {
        catsListDelegates?.footerHeight = 0
    }
    
    func showCats(cats: [CatsList.CatVM]) {
        catsListDelegates?.cats.append(contentsOf: cats)
        
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    func showCatDetail() {
        router?.routeToCatDetail()
    }
    
    // MARK: - Private Methods
    
    private func setupCollectionView() {
        collectionView.prefetchDataSource = catsListDelegates
        collectionView.dataSource = catsListDelegates
        collectionView.delegate = catsListDelegates
        
        self.collectionView.register(LoadingView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: LoadingView.defaultReuseIdentifier)
        self.collectionView.register(CatsListCell.self)
    }
    
    private func setupTitle() {
        self.title = viewModel.title
    }
    
    private func fetchCats() {
        interactor?.fetchListOfCats()
    }
}
